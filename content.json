{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"配置本地访问远程Linux系统服务器的jupyter notebook","slug":"配置本地访问远程Linux系统服务器的jupyter-notebook","date":"2019-07-23T11:22:28.000Z","updated":"2019-07-23T11:57:34.071Z","comments":true,"path":"2019/07/23/配置本地访问远程Linux系统服务器的jupyter-notebook/","link":"","permalink":"http://yoursite.com/2019/07/23/配置本地访问远程Linux系统服务器的jupyter-notebook/","excerpt":"","text":"环境情况 远程服务器上配置了anaconda 本地主机没有安装anaconda（其实安不安装都无所谓，有浏览器就行） 配置步骤如下 登录远程服务器 生成配置文件 jupyter notebook --generate-config 生成密码 输入ipython打开ipython生成密钥： 12345In [1]: from notebook.auth import passwdIn [2]: passwd()Enter password:Verify password:Out[2]: 'sha1:ce23d945972f:34769685a7ccd3d08c84a18c63968a41f1140274' #这段是密钥 把生成的密钥’sha1:ce2…’复制下来后面用，password是远程登录时需要输入的密码，要记住。 修改配置文件 使用vim打开配置文件 vim ~/.jupyter/jupyter_notebook_config.py 修改如下地方： 123456c.NotebookApp.ip = '*'c.NotebookApp.password = u'sha:ce...刚才复制的那个密文'c.NotebookApp.open_browser = Falsec.NotebookApp.port = 8888 #随便指定一个端口，但是要记住c.NotebookApp.allow_remote_access = Truec.NotebookApp.notebook_dir = u'目录' #这个是根目录，不想配置就不配置，默认是用户家目录 启动jupyter notebook 正常启动： jupyter notebook 但是我们可能通常想要在后台启动jupyter，然后关闭终端，在本地电脑上用浏览器访问： nohup jupyter notebook &amp; 远程访问 在本地打开浏览器访问 http://address_of_remote:8888 就可以访问jupyter的登录界面了，输入密码就可以正常登录了。 意外情况有些服务器可能只开放一个对外的端口，但是我们通过终端访问服务器需要一个对外端口，开启jupyter服务又需要一个端口，这样就需要同时占用两个端口才行。举个例子说，服务器为了保证安全性只开放了一个对外的端口，22号端口，我们使用终端通过22号端口登录到服务器上打开jupyter，jupyter创建的端口是8888号，但是服务器没有对外开放8888号端口，所以即使打开了jupyter，外面也无法正常访问。如果把jupyter的端口号改为22号，由于我们登录终端的时候正在占用22号，所以jupyter就会提示端口已被占用，无法创建。这时候我们可以使用端口映射来解决这个问题。 首先登录终端打开jupyter，这是根据配置信息jupyter占用的是8888端口。 然后我们在本地上使用命令行输入： ssh -N -f -L localhost:9999:localhost:8888 -p 端口号 username@远程地址 例如ssh -N -f -L localhost:9999:localhost:8888 -p 22 yzr@202.48.29.23 这里说明一下：locahost:9999是指本地地址，localhost:8888是指远程地址，其中8888是jupyter notebook中设置的端口号，-p 22是指登录服务器的端口号 后面是用户名和服务器ip。 打开浏览器，输入localhost:9999就可以看到jupyter notebook的登录界面了。 这里原理上就是将服务器上的8888端口映射到本机的9999端口。","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[{"name":"jupyter","slug":"jupyter","permalink":"http://yoursite.com/tags/jupyter/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/深度学习/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-07-02T13:51:31.607Z","updated":"2019-07-09T11:40:41.295Z","comments":true,"path":"2019/07/02/hello-world/","link":"","permalink":"http://yoursite.com/2019/07/02/hello-world/","excerpt":"","text":"欢迎来到Hexo！这是你的第一篇文章。查看文档以获取更多信息。 如果您在使用Hexo时遇到任何问题，可以在故障排除中找到答案，或者您可以在GitHub上询问我。 快速开始创建一个新帖子1$ hexo new \"我的新帖子\" 更多信息：写作 运行服务器1$ hexo server 更多信息：服务器 生成静态文件1$ hexo generate 更多信息：生成 部署到远程站点1$ hexo deploy 更多信息：部署","categories":[],"tags":[]}]}